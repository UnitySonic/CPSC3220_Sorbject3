NAME: Michael Merritt

DESCRIPTION:
	This is a memory allocator. Specifically, it is a big bag of pages style memory allocator.
	It requests pages from the operating system and stores objects in them. Each page stores 
	objects in blocks whose size is a power of 2. Once the object's size is bigger than 1024,
	however, it is given a custom page where the block isn't nessecarily a power of 2. 

DESIGN:
	For this project I had two design ideas. The first v1, is a slow implementation in which
	the program traverses the linkedlist of pages to find freeblocks of memory. This is the
	current implementation in the repo. The second implementation was v2, which was planned
	but there wasn't enough time to implement it. v2 was meant to use a cache system
	It would create pages whose purpose is to store pointers that point to a page that has a freeblock
	of space available. By doing this I can make malloc calls that are far faster than the V1 approach
	The big issue with this is it has an overreliance on system calls. Also, although it
	doesn't waste a TON of extra space, it does still waste space on reserving pages simply for
	caches. 


KNOWN PROBLEMS:
	For this implementation, the only limiting factor is speed. A fix to the cache
	based approach would have fixed this.
